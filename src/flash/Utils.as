package {		import flash.net.FileFilter;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		class Utils {		public static function filter(types:*):Array {			if (!types){				return null;			}						if (types is String){				return [ filterTypes(types, types) ];			}						if (!(types is Object)){				return null;			}						var filter:Array = [];			for (var key:String in types){				filter.push( filterTypes(key, types[key]) );			}			return filter;		}				private static function filterTypes(name:String, types:String):FileFilter {			return new FileFilter(name, types + '; ' + types.toUpperCase() + '; ' + types.toLowerCase());		}				public static function request(options:Object):URLRequest {			var request:URLRequest = new URLRequest(options.url || '');			request.method = URLRequestMethod.POST;							if (options.data){				request.data = Utils.requestData(options.data);			}						return request;		}				public static function requestData(options:*):URLVariables {			var data:URLVariables = new URLVariables();						if (options is String){				data.decode(options);			} else {				for (var key:Object in options) data[key] = options[key];			}						return data;		}				public static function escape(message:*):*{			if (message == null)		return null;			if (message is Function)	return null;			if (message is String)		return escapeString(message);			if (message is Array)		return escapeArray(message);			if (message is Date)		return message.valueOf();			if (message is Object)		return escapeObject(message);			if (message is Boolean)		return message;			if (message is Number)		return message;						return message;		}				public static function escapeString(message:String):String {			return message.replace(/\\/g, "\\\\");		}				public static function escapeArray(array:Array):Array {			return array.map(function(item:*, i:uint, self:Array){				return escape(item);			});		}				public static function escapeObject(object:*):Object{			for (var name:String in object) {				object[ escapeString(name) ] = escape( object[name] );			}			return object;		}				public static function d(object:Object):String {			var inspect:String = "";			for(var name:String in object){				inspect += "'" + name + "': " + object[name] + ", ";			}			return '{' + inspect + '}';		}	}}